{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CarritoService {\n  constructor() {\n    this.alCarrito = [];\n    const storedCart = localStorage.getItem('carrito');\n    if (storedCart) {\n      this.alCarrito = JSON.parse(storedCart);\n    }\n  }\n  VerCarrito() {\n    return this.alCarrito;\n  }\n  agregarAlCarrito(articulo) {\n    if (!articulo || !articulo.cantidad || articulo.cantidad <= 0) {\n      console.error(\"El artículo no es válido o la cantidad es cero.\");\n      return;\n    }\n    const index = this.alCarrito.findIndex(a => a.iD_Articulo === articulo.iD_Articulo);\n    if (index > -1) {\n      // Si el artículo ya existe en el carrito, actualizar la cantidad.\n      this.alCarrito[index].cantidad += articulo.cantidad;\n    } else {\n      // Si el artículo no existe, agregarlo.\n      this.alCarrito.push({\n        ...articulo\n      }); // Agregamos una copia para evitar referencias compartidas.\n    }\n\n    this.guardarCarrito(); // Persistir el estado del carrito.\n  }\n\n  eliminarDelCarrito(idArticulo) {\n    this.alCarrito = this.alCarrito.filter(a => a.iD_Articulo !== idArticulo);\n    this.guardarCarrito();\n  }\n  vaciarCarrito() {\n    this.alCarrito = [];\n    this.guardarCarrito();\n  }\n  guardarCarrito() {\n    localStorage.setItem('carrito', JSON.stringify(this.alCarrito));\n  }\n}\nCarritoService.ɵfac = function CarritoService_Factory(t) {\n  return new (t || CarritoService)();\n};\nCarritoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CarritoService,\n  factory: CarritoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,cAAc;EAIzBC;IAFA,cAAS,GAAe,EAAE;IAGxB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAClD,IAAIF,UAAU,EAAE;MACd,IAAI,CAACG,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;;EAE3C;EAEAM,UAAU;IACR,OAAO,IAAI,CAACH,SAAS;EACvB;EAEAI,gBAAgB,CAACC,QAAkB;IACjC,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACC,QAAQ,IAAID,QAAQ,CAACC,QAAQ,IAAI,CAAC,EAAE;MAC7DC,OAAO,CAACC,KAAK,CAAC,iDAAiD,CAAC;MAChE;;IAGF,MAAMC,KAAK,GAAG,IAAI,CAACT,SAAS,CAACU,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,KAAKP,QAAQ,CAACO,WAAW,CAAC;IAEnF,IAAIH,KAAK,GAAG,CAAC,CAAC,EAAE;MACd;MACA,IAAI,CAACT,SAAS,CAACS,KAAK,CAAC,CAACH,QAAQ,IAAID,QAAQ,CAACC,QAAQ;KACpD,MAAM;MACL;MACA,IAAI,CAACN,SAAS,CAACa,IAAI,CAAC;QAAE,GAAGR;MAAQ,CAAE,CAAC,CAAC,CAAC;;;IAGxC,IAAI,CAACS,cAAc,EAAE,CAAC,CAAC;EACzB;;EAEAC,kBAAkB,CAACC,UAAkB;IACnC,IAAI,CAAChB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACiB,MAAM,CAACN,CAAC,IAAIA,CAAC,CAACC,WAAW,KAAKI,UAAU,CAAC;IACzE,IAAI,CAACF,cAAc,EAAE;EACvB;EAEAI,aAAa;IACX,IAAI,CAAClB,SAAS,GAAG,EAAE;IACnB,IAAI,CAACc,cAAc,EAAE;EACvB;EAEQA,cAAc;IACpBhB,YAAY,CAACqB,OAAO,CAAC,SAAS,EAAElB,IAAI,CAACmB,SAAS,CAAC,IAAI,CAACpB,SAAS,CAAC,CAAC;EACjE;;AA9CWL,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA0B,SAAd1B,cAAc;EAAA2B,YAFb;AAAM","names":["CarritoService","constructor","storedCart","localStorage","getItem","alCarrito","JSON","parse","VerCarrito","agregarAlCarrito","articulo","cantidad","console","error","index","findIndex","a","iD_Articulo","push","guardarCarrito","eliminarDelCarrito","idArticulo","filter","vaciarCarrito","setItem","stringify","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\rober\\OneDrive\\Desktop\\ESTUDIOS\\DAM\\proyecto\\ApiProyecto\\TiendaRopaAngular\\TiendaProyectoAngular\\src\\app\\services\\carrito.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {Articulo} from \"../models/Articulo\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CarritoService {\r\n\r\n  alCarrito: Articulo[] = [];\r\n\r\n  constructor() {\r\n    const storedCart = localStorage.getItem('carrito');\r\n    if (storedCart) {\r\n      this.alCarrito = JSON.parse(storedCart);\r\n    }\r\n  }\r\n\r\n  VerCarrito() {\r\n    return this.alCarrito;\r\n  }\r\n\r\n  agregarAlCarrito(articulo: Articulo): void {\r\n    if (!articulo || !articulo.cantidad || articulo.cantidad <= 0) {\r\n      console.error(\"El artículo no es válido o la cantidad es cero.\");\r\n      return;\r\n    }\r\n\r\n    const index = this.alCarrito.findIndex(a => a.iD_Articulo === articulo.iD_Articulo);\r\n\r\n    if (index > -1) {\r\n      // Si el artículo ya existe en el carrito, actualizar la cantidad.\r\n      this.alCarrito[index].cantidad += articulo.cantidad;\r\n    } else {\r\n      // Si el artículo no existe, agregarlo.\r\n      this.alCarrito.push({ ...articulo }); // Agregamos una copia para evitar referencias compartidas.\r\n    }\r\n\r\n    this.guardarCarrito(); // Persistir el estado del carrito.\r\n  }\r\n\r\n  eliminarDelCarrito(idArticulo: number): void {\r\n    this.alCarrito = this.alCarrito.filter(a => a.iD_Articulo !== idArticulo);\r\n    this.guardarCarrito();\r\n  }\r\n\r\n  vaciarCarrito(): void {\r\n    this.alCarrito = [];\r\n    this.guardarCarrito();\r\n  }\r\n\r\n  private guardarCarrito(): void {\r\n    localStorage.setItem('carrito', JSON.stringify(this.alCarrito));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}